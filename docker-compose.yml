services:
  client:
    build: ./client
    ports:
    - "3000:3000"
    depends_on:
      - user_service

  user_service:
    build: ./user-service
    ports:
    - "4000:4000"
    depends_on:
      user_service_db:
        condition: service_healthy

  user_service_db:
    image: postgres:14-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USERVICE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USERVICE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_USERVICE_DB}
    volumes:
      - postgres_data_user:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "users_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  newsletter_service:
    build: ./newsletter-service
    ports:
    - "4500:4500"
    user: "nobody"
    depends_on:
      newsletter_service_db:
        condition: service_healthy

  newsletter_service_db:
    image: postgres:14-alpine
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_NSERVICE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_NSERVICE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NSERVICE_DB}
    volumes:
      - postgres_data_newsletter:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "newsletters_db"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_user:
  postgres_data_newsletter: